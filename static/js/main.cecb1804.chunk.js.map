{"version":3,"sources":["components/Banner/index.jsx","components/Wrapper/index.jsx","components/Search/index.jsx","components/UserCard/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Banner","id","className","Wrapper","props","Search","name","onChange","value","type","placeholder","aria-label","input","onClick","UserCard","scope","src","alt","firstName","lastName","phone","email","age","axios","get","App","state","users","search","filteredUsers","results","error","createUsers","API","then","response","setState","data","catch","err","console","log","handleInputChange","event","target","userSearch","res","handleFormSubmit","preventDefault","filter","first","toLowerCase","includes","sortUsers","sortedUsers","sort","a","b","this","map","user","picture","large","last","dob","date","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kXAceA,MAXf,WACE,OACE,yBAAKC,GAAG,QAAQC,UAAU,6BACxB,yBAAKA,UAAU,aACb,wBAAIA,UAAU,wBAAd,kBACA,uBAAGA,UAAU,mBAAb,wCCDOC,MAJf,SAAiBC,GACf,OAAO,wCAAMF,UAAU,WAAcE,KC6BxBC,G,MA9BA,SAACD,GACd,OACE,yBAAKF,UAAW,aACd,yBAAKA,UAAW,OACd,yBAAKA,UAAW,eACd,0BAAMA,UAAW,cAAeD,GAAG,UACjC,2BACEK,KAAMF,EAAME,KACZC,SAAUH,EAAMG,SAChBC,MAAOJ,EAAMI,MACbN,UAAU,uBACVO,KAAK,SACLC,YAAY,uBACZC,aAAW,SACXC,MAAOR,EAAMQ,QAEf,4BACEC,QAAST,EAAMS,QACfX,UAAU,uCACVO,KAAK,UAHP,gBCkBGK,G,MAlCE,SAACV,GAChB,OACE,6BACE,2BAAOF,UAAU,SACf,+BACE,4BACE,wBAAIa,MAAM,OAAV,SACA,wBAAIA,MAAM,MAAMF,QAAST,EAAMS,SAC5B,IACD,4BAAQX,UAAU,iBAAlB,SAEF,wBAAIa,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGJ,+BACE,4BACE,4BACE,yBAAKb,UAAU,YAAYc,IAAKZ,EAAMY,IAAKC,IAAI,UAEjD,4BACGb,EAAMc,UADT,IACqBd,EAAMe,UAE3B,4BAAKf,EAAMgB,OACX,4BAAKhB,EAAMiB,OACX,4BAAKjB,EAAMkB,W,iBCtBR,EACE,WACb,OAAOC,IAAMC,IANF,mFC4GAC,E,4MAtGbC,MAAQ,CACNC,MAAO,GACPC,OAAQ,GACRC,cAAe,GACfC,QAAS,GACTC,MAAO,I,EAgBTC,YAAc,WACZC,IACGC,MAAK,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAET,MAAOQ,EAASE,KAAKP,aACxDQ,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,O,EAGhCG,kBAAoB,SAACC,GACnB,IAAMnC,EAAQmC,EAAMC,OAAOpC,MACrBF,EAAOqC,EAAMC,OAAOtC,KAC1B,EAAK8B,SAAL,eACG9B,EAAOE,K,EAIZqC,WAAa,WACXZ,IACGC,MAAK,SAACY,GAAD,OACJ,EAAKV,SAAS,CACZP,cAAeiB,EAAIT,KAAKP,QACxBH,MAAOmB,EAAIT,KAAKP,aAGnBQ,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,O,EAKhCQ,iBAAmB,SAACJ,GAClBA,EAAMK,iBADsB,MAGF,EAAKtB,MAAvBC,EAHoB,EAGpBA,MAAOC,EAHa,EAGbA,OAETC,EAAgBF,EAAMsB,QAAO,SAACtB,GAAD,OACjCA,EAAMrB,KAAK4C,MAAMC,cAAcC,SAASxB,EAAOuB,kBAEjD,EAAKf,SAAS,CAAET,MAAOE,K,EAIzBwB,UAAY,WAMV,IAAMC,EAAc,EAAK5B,MAAMC,MAAM4B,MALrC,SAAiBC,EAAGC,GAClB,OAAID,EAAElD,KAAK4C,MAAQO,EAAEnD,KAAK4C,MAAc,EACpCO,EAAEnD,KAAK4C,MAAQM,EAAElD,KAAK4C,OAAe,EAClC,KAGTV,QAAQC,IAAIa,GACZ,EAAKlB,SAAS,CACZT,MAAO2B,K,kEA7DU,IAAD,OAClBI,KAAK1B,cACLC,IACGC,MAAK,SAACY,GAAD,OACJ,EAAKV,SAAS,CACZT,MAAOmB,EAAIT,KAAKP,QAChBD,cAAeiB,EAAIT,KAAKP,QACxBF,OAAQ,EAAKF,MAAMlB,WAGtB8B,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,+BAuDtB,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEjC,KAAK,SACLC,SAAUmD,KAAKhB,kBACflC,MAAOkD,KAAKhC,MAAME,OAClBf,QAAS6C,KAAKX,iBACdnC,MAAO8C,KAAKhC,MAAMd,QAEnB8C,KAAKhC,MAAMC,MAAMgC,KAAI,SAACC,GAAD,OACpB,kBAAC,EAAD,CACE/C,QAAS,EAAKwC,UACdrC,IAAK4C,EAAKC,QAAQC,MAClB5C,UAAW0C,EAAKtD,KAAK4C,MACrB/B,SAAUyC,EAAKtD,KAAKyD,KACpB1C,MAAOuC,EAAKvC,MACZD,MAAOwC,EAAKxC,MACZE,IAAKsC,EAAKI,IAAIC,gB,GA9FVC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd3C,OAAM,SAAAP,GACLS,QAAQT,MAAMA,EAAMmD,c","file":"static/js/main.cecb1804.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Banner() {\n  return (\n    <div id=\"jumbo\" className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4 bannerText\">User Directory</h1>\n        <p className=\"lead bannerText\">Search & Sort Users by First Name</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Banner;\n","import React from \"react\";\n\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Search = (props) => {\n  return (\n    <div className={\"container\"}>\n      <div className={\"row\"}>\n        <div className={\"col-md-auto\"}>\n          <form className={\"form-inline\"} id=\"search\">\n            <input\n              name={props.name}\n              onChange={props.onChange}\n              value={props.value}\n              className=\"form-control mr-sm-2\"\n              type=\"search\"\n              placeholder=\"Search by First Name\"\n              aria-label=\"Search\"\n              input={props.input}\n            />\n            <button\n              onClick={props.onClick}\n              className=\"btn btn-outline-success my-2 my-sm-0\"\n              type=\"submit\"\n            >\n              Search\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst UserCard = (props) => {\n  return (\n    <div>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Image</th>\n            <th scope=\"col\" onClick={props.onClick}>\n              {\" \"}\n              <button className=\"btn btn-light\">Name</button>\n            </th>\n            <th scope=\"col\">Phone</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">DOB</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <img className=\"userImage\" src={props.src} alt=\"user\" />\n            </td>\n            <td>\n              {props.firstName} {props.lastName}\n            </td>\n            <td>{props.phone}</td>\n            <td>{props.email}</td>\n            <td>{props.age}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default UserCard;\n","import axios from \"axios\";\n\n// Export an object containing methods we'll use for accessing the Dog.Ceo API\nconst apiUrl = \"https://randomuser.me/api/?results=100&nat=us&inc=picture,name,email,phone,dob\"\n\n\n\nexport default {\n  getRandomUser: function() {\n    return axios.get(apiUrl);\n  \n//   },\n//   getDogsOfBreed: function(breed) {\n//     return axios.get(\"https://dog.ceo/api/breed/\" + breed + \"/images\");\n//   },\n//   getBaseBreedsList: function() {\n//     return axios.get(\"https://dog.ceo/api/breeds/list\");\n  }\n};","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Banner from \"./components/Banner\";\nimport Wrapper from \"./components/Wrapper\";\nimport Search from \"./components/Search\";\nimport UserCard from \"./components/UserCard\";\nimport API from \"./utils/API\";\n\nclass App extends Component {\n  state = {\n    users: [],\n    search: \"\",\n    filteredUsers: [],\n    results: {},\n    error: \"\",\n  };\n\n  componentDidMount() {\n    this.createUsers();\n    API.getRandomUser()\n      .then((res) =>\n        this.setState({\n          users: res.data.results,\n          filteredUsers: res.data.results,\n          search: this.state.value,\n        })\n      )\n      .catch((err) => console.log(err));\n  }\n\n  createUsers = () => {\n    API.getRandomUser()\n      .then((response) => this.setState({ users: response.data.results }))\n      .catch((err) => console.log(err));\n  };\n\n  handleInputChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  userSearch = () => {\n    API.getRandomUser()\n      .then((res) =>\n        this.setState({\n          filteredUsers: res.data.results,\n          users: res.data.results,\n        })\n      )\n      .catch((err) => console.log(err));\n  };\n\n  // This handles the search submit button action when searching using the first name\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const { users, search } = this.state;\n\n    const filteredUsers = users.filter((users) =>\n      users.name.first.toLowerCase().includes(search.toLowerCase())\n    );\n    this.setState({ users: filteredUsers });\n  };\n\n  // This function sorts users by their first name\n  sortUsers = () => {\n    function compare(a, b) {\n      if (a.name.first > b.name.first) return 1;\n      if (b.name.first > a.name.first) return -1;\n      return 0;\n    }\n    const sortedUsers = this.state.users.sort(compare);\n    console.log(sortedUsers);\n    this.setState({\n      users: sortedUsers,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Banner />\n        <Wrapper>\n          <Search\n            name=\"search\"\n            onChange={this.handleInputChange}\n            value={this.state.search}\n            onClick={this.handleFormSubmit}\n            input={this.state.input}\n          />\n          {this.state.users.map((user) => (\n            <UserCard\n              onClick={this.sortUsers}\n              src={user.picture.large}\n              firstName={user.name.first}\n              lastName={user.name.last}\n              email={user.email}\n              phone={user.phone}\n              age={user.dob.date}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}